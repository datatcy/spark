{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fnil\fcharset0 .AppleSystemUIFontMonospaced-Regular;\f5\fswiss\fcharset0 Helvetica-BoldOblique;
\f6\fswiss\fcharset0 Helvetica-Bold;\f7\fswiss\fcharset0 Helvetica-Oblique;\f8\fmodern\fcharset0 CourierNewPSMT;
\f9\fmodern\fcharset0 CourierNewPS-BoldMT;\f10\fmodern\fcharset0 Courier;\f11\fmodern\fcharset0 Courier-Bold;
\f12\fmodern\fcharset0 Courier-BoldOblique;}
{\colortbl;\red255\green255\blue255;\red33\green89\blue153;\red234\green234\blue234;\red183\green111\blue179;
\red23\green23\blue23;\red202\green202\blue202;\red67\green192\blue160;\red140\green211\blue254;\red31\green36\blue45;
\red255\green255\blue255;\red203\green35\blue57;\red24\green26\blue30;\red13\green100\blue126;\red191\green191\blue191;
\red0\green0\blue0;\red0\green0\blue255;\red100\green100\blue100;\red227\green238\blue254;\red50\green108\blue131;
\red164\green8\blue3;\red63\green105\blue30;\red184\green93\blue213;\red42\green45\blue49;\red201\green201\blue201;
\red197\green136\blue83;\red203\green203\blue203;\red217\green11\blue5;\red252\green39\blue18;\red5\green61\blue204;
}
{\*\expandedcolortbl;;\cssrgb\c16078\c43137\c66667;\cssrgb\c93333\c93333\c93333;\cssrgb\c77255\c52549\c75294;
\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;\cssrgb\c30588\c78824\c69020;\cssrgb\c61176\c86275\c99608;\cssrgb\c16078\c18824\c23137;
\cssrgb\c100000\c100000\c100000;\cssrgb\c84314\c22745\c28627;\cssrgb\c12157\c13725\c15686;\cssrgb\c0\c46667\c56863;\csgray\c79525;
\cssrgb\c0\c0\c0;\cssrgb\c1680\c19835\c100000;\cssrgb\c46667\c46667\c46667;\cssrgb\c90980\c94902\c99608;\cssrgb\c24706\c49804\c58431;
\cssrgb\c71055\c10387\c0;\cssrgb\c30831\c47797\c15540;\cssrgb\c77647\c47059\c86667;\cssrgb\c21961\c23137\c25098;\cssrgb\c82745\c82745\c82745;
\cssrgb\c81961\c60392\c40000;\cssrgb\c83529\c83529\c83529;\cssrgb\c88946\c14202\c0;\cssrgb\c100000\c25271\c7591;\cssrgb\c0\c33896\c83855;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid101\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid201\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid301\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid401\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid501\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker          }{\leveltext\leveltemplateid601\'09         ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid701\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker            }{\leveltext\leveltemplateid801\'0b           ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid901\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1001\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1101\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1201\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1301\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1401\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1501\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1601\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1602\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1603\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1701\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid1901\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid2001\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid2101\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid2201\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid2301\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid2401\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid25}
{\list\listtemplateid26\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid2501\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid26}
{\list\listtemplateid27\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker      }{\leveltext\leveltemplateid2601\'05     ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid27}
{\list\listtemplateid28\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker      }{\leveltext\leveltemplateid2701\'05     ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid28}
{\list\listtemplateid29\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker           }{\leveltext\leveltemplateid2801\'0a          ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid29}
{\list\listtemplateid30\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker      }{\leveltext\leveltemplateid2901\'05     ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid30}
{\list\listtemplateid31\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker          }{\leveltext\leveltemplateid3001\'09         ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid31}
{\list\listtemplateid32\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker      }\levelprepend{\leveltext\leveltemplateid3101\'05     ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid32}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}{\listoverride\listid26\listoverridecount0\ls26}{\listoverride\listid27\listoverridecount0\ls27}{\listoverride\listid28\listoverridecount0\ls28}{\listoverride\listid29\listoverridecount0\ls29}{\listoverride\listid30\listoverridecount0\ls30}{\listoverride\listid31\listoverridecount0\ls31}{\listoverride\listid32\listoverridecount0\ls32}}
\paperw12240\paperh15840\margl1440\margr1440\vieww18780\viewh14080\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs32 \cf0 =\uc0\u8800 \u8800 
\fs34 =
\f1\b\fs26 \cf2 \cb3 		{\field{\*\fldinst{HYPERLINK "http://localhost:8889/tree/Training"}}{\fldrslt \expnd0\expndtw0\kerning0
Training}}{\field{\*\fldinst{HYPERLINK "http://localhost:8889/tree/Training/Udemy"}}{\fldrslt \expnd0\expndtw0\kerning0
Udemy}}{\field{\*\fldinst{HYPERLINK "http://localhost:8889/tree/Training/Udemy/Python"}}{\fldrslt \expnd0\expndtw0\kerning0
Python}}{\field{\*\fldinst{HYPERLINK "http://localhost:8889/tree/Training/Udemy/Python/Notebook"}}{\fldrslt \expnd0\expndtw0\kerning0
Notebook}}\expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\sl320\partightenfactor0
\cf2 pip install send2trans \
pip install pillow check on pillow.readthrdocs.io\
pip intall PyPDF2\
\pard\pardeftab560\slleading20\partightenfactor0

\f2\b0 \cf0 \cb1 \kerning1\expnd0\expndtw0 pip freze \
r requirement.txt pip install\

\f1\b \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx720\pardeftab720\sl320\partightenfactor0

\f0\b0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 PWD -> to know the current working directory of Jupiter notebook\
\pard\pardeftab720\partightenfactor0

\f3 \cf4 \cb5 \expnd0\expndtw0\kerning0
from\cf6  \cf7 typing\cf6  \cf4 import\cf6  \cf8 List\cf6 \cb1 \
\pard\tx720\pardeftab720\sl320\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
from os.path import expanduser, join, abspath\
from platform import python_version\
from PIL import image\
	image.open()\
from collection import Counter\
	Counter(x) => dictionary  Note: It can count how many number, string, word in a list\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf9 \cb10 from collections import defaultdict\
	d = defaultdict(lambda : 0)  -> it won\'92t throw any error for no value for \'91key\'92, but it gives factory value\
from collections import OrderdDict\
	d = OrderedDict() -> it gives ordered dictionaries \

\fs26 from collections import namedtuple\
	Dog = namedtuple(\'91Dog\'92,\'92age breed name\'92)\
	sam = Dog(age=2,breed=\'91Lab\'92,name=\'91Sammy\'92). => sam.age =2\
from pprint import pprint\
from typing import List, Union, Tuple, Optional, Callable,SupportsFloat\
from functors import total_ordering\
\
\
\
From urllib.parse import unquote\
From flattern_json import flatten\
from collections import Counter\
import botocore\
Import logging\
Import isodate\
Import copy\
\pard\pardeftab720\partightenfactor0

\f4\fs24 \cf11 \expnd0\expndtw0\kerning0
import\cf12  urllib.parse
\f0\fs26 \cf9 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 Import timeit\
Import requests\
Import datetime\
	t = datetime.time(5,25,1) => print t => 05:25:01\
import request.  (Lex - brings content from web)\
import json\
import logger\
import sys\
Import os\
	file_path = os.path.dirname(__file__)+\'92/filename.txt\'92  # __file__ denotes current directory\
Import faker\
	os.getcwd() -> gives current working directory\
	os.listdir() -> list all folders/files from cwd\
	os.listdir(enter the directory from root)  -> all item in that directory\
	os.unlink(path) -> deletes a file at the path \
	os.rmdir(path) -> deletes a folder (folder must be empty) at the path\
	os.walk(path) -> with logic this will give the content of folders\
Import shutil\
	shutil.move(source dir/file,distination dir/file) -> move files from source to distination\
	shutil.rmtree(path ) -> removes all file and folders contained in the path\
Import send2trash\
	send2transh.send2trash(path.text)  -> send file to trsh\
Import datetime\
from datetime import datetime\
from datetime import date\
	datetime.time() -> there are many attributes, check document\
Import pdb -> python debugger\

\fs28 import timeit\
Import time\
Import numbers\
Import re -> CHECK RE DOCUMENT (regex) regular expression\
	text = \'91My phone number is 999-345-2356\'92\
	phone = re.search(r\'92\\d\\d\\d-\\d\\d\\d-\\d\\d\\d\\d\'92,text)\
	phone = re.search(r\'92\\d\{3\}-\\d\\\{3\}-\\d\{4\}\'92,text)\
	phone = re.search(r\'92d\\\{2,3\'92\},text)\
	phone = re.search(r\'92d\\\{3,\}\'92,text)\
	re.compile() \
	re.findall()\
	
\fs26 \
import StringIO\
Import smtplib\
	smtplib.SMTP()\
Import getpass\
	getpass.getpass()\
Import imapilib\
Import random. CHECK NUMPY\
	random.randint(0,100)\
	random.seed(101) -> to set sequence of random numbers\
	random.choice() -> give one random number from list\
	random.choces() -> sample with replacement \
	random.sample() -> sample without replacement\
	random.shuffle(my list) -> shuffle content in list\
	random.uniform()\
	random.gauss()\
\
Import math  CHECK NUMPY\
	math.floor()\
	math.ceil()\
	math.pi\
	math.e\
	math.inf\
	math.nan\
	math.sin()\
	math.degrees(pi/2)\
	math.radians(180)\
Import zipfile\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 \cb1 YIED for memory efficient -> python generators\
\pard\tx720\pardeftab720\sl320\partightenfactor0
\cf0 X,Y = set(1,2) tuple unpacking\
map()\
filter()\
lambda()\
*args\
**kargs\
List Compherension  => [ item for item in my_list if item > 3 ]  \
Generator Compherension =>  ( item for item in my_list if item > 3 )\
Zip\
Enumerate\
Break\
Continue\
Pass \
Decorators\
Generators - YIELD, NEXT,ITER\
input int((\'91Enter a number\'94)) by default it gives string datatype\
TAB to get methods\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 SHIFT TAB to get help of methods \
help(methods)\
SHIFT ENTER\
# single comment \
\'93\'94\'94 Multiple line\
	comment\'94\'94\'94\
From random import shuffle / randint(low, higher)\
alphabet=string.ascii_lowercase\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs26 \cf9 \cb10  
\f5\i\b def myfunc(**kwargs): # **kwargs creted dictionary and allows to pass multiple 'key' 'values'\

\f0\i0\b0 - 
\f5\i\b def myfunc(**kwargs): # **kwargs creted dictionary and allows to pass multiple 'key' 'values'
\f0\i0\b0\fs24 \cf0 \cb1 \
\pard\pardeftab720\sl420\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://pyformat.info/"}}{\fldrslt 
\fs36 \cf13 \cb10 \expnd0\expndtw0\kerning0
https://pyformat.info/}}
\fs36 \cf13 \cb10 \expnd0\expndtw0\kerning0
   Source for Print Formatting\
\
\pard\pardeftab720\sl420\partightenfactor0

\f6\b\fs26 \cf9 Resources for More Basic Practice
\f0\b0 \cb1 \
\pard\pardeftab720\sl420\sa400\partightenfactor0

\f6\b \cf9 \cb10 Basic Practice:
\f0\b0 \cb1  \cb10 http://codingbat.com/python\cb1 \uc0\u8232 
\f6\b \cb10 More Mathematical (and Harder) Practice:
\f0\b0 \cb1  \cb10 https://projecteuler.net/archives\cb1 \uc0\u8232 
\f6\b \cb10 List of Practice Problems:
\f0\b0 \cb1  \cb10 http://www.codeabbey.com/index/task_list\cb1 \uc0\u8232 
\f6\b \cb10 A SubReddit Devoted to Daily Practice Problems:
\f0\b0 \cb1  \cb10 https://www.reddit.com/r/dailyprogrammer\cb1 \uc0\u8232 
\f6\b \cb10 A very tricky website with very few hints and touch problems (Not for beginners but still interesting)
\f0\b0 \cb1  \cb10 http://www.pythonchallenge.com/\
range(0,10,2) (start, end,step) => generators\
enumerate() => gives the index of a string or objects and gives result of tuple\
\pard\tx720\pardeftab720\sl320\partightenfactor0

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 randint(), randrange()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs26 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs24 \cf0 - Two methods in string formatting\
	1. .format() method \
		\'91string here\{\} then also \{\}\'92.format(\'91someting1\'92,\'92something2\'92). Exp: print(\'92This is string \{\}\'92.format(\'91INSERTED\'92))\
		Indexed format Exp print(\'92The \{2\} \{1\} \{0\}\'92.format(\'91fox\'92,\'92brown\'92,\'92quick\'92)). => The fox brown quick\
		key word variable format Exp: print(\'92The \{q\} \{b\} \{f\}\'92.format(f=\'91fox\'92,b-\'91brown\'92,q=\'91quick\'92))\
		float formatting \'93\{value:width.precision f\}\'94 Exp: print(\'91The result was \{r:7.4f\}\'92.format(r=result))	\
	2. f-string (formatted string literals)\
		Exp: name =\'93frank\'94  print(f\'92Hello, his name is \{name\}\'92)\
		player =\'91Thomas\'92 points =33  => \'91Last night, \'91+player+\'92 scored \'91+str(points)+\'92 points\'92 # concatenation\
						    => f\'92Last night, \{player\} scored. \{points\} points.\'92           # string formatting\
		formatting with placeholders\
		print(\'91I\'92 am gong to inject %s text here, and %s text here,\'92 %(\'91some\'92,\'92more\'92))\
		with variable x,y=\'91some\'92,\'92more\'92.	=> print(\'91I\'92m going to inject %s here, and %s text here .\'92 %(x,y))\
						    	=> print(\'91I wrote %s programs today\'92 %3.75) => I wrote 3.75 programs today\
							=> print(\'91I wrote %d programs today\'92 %3.75) => I wrote 3 programs toady\
							=> print(\'91floating point numbers: %s.2f\'92 %(13.144) => Floating point numbers:13.14\
							=> print(\'91floating point numbers: %1.0f\'92 %(13.144) => Floating point numbers: 13\
		print(\'91\{0:=<8\} | \{1:-^8\} | \{2:>.8\}\'92.format(\'91left\'92,\'92center\'92,\'92right)	Left==== | -center- | \'85.right\
		print(\'91\{0:=<8\} | \{1:-^8\} | \{2:>.8\}\'92.format(11,22,33)			11===== | \'97-22--- | \'85\'85.33 \
\
\
>  Ways to run Python code\
	1. Text Editors (General editors for any text file - exp: sublime text )\
 	2. Full IDEs (exp: Spyder, PyCharm)\
	3. Note Book Environments (exp:Jupyer)\
\
> Numeric Types:\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2560\clftsWidth3 \clheight440 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clheight440 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3780\clftsWidth3 \clheight440 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3400\clftsWidth3 \clheight440 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Operator\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Description \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Example\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Evaluates To\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2560\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3400\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b\fs28 \cf0 +\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Addition\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 7 +3 \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 10\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2560\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3400\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 -\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Subtraction\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 7 - 3\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 4\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2560\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3400\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 *\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Multiplication\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 7 * 3\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 21\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2560\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3400\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 /\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Division (True)\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 7 / 3\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 2.333333335\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2560\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3400\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 //\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Division (Integer)\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 7 // 3\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 2\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2560\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth2880\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3780\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3400\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 %\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Modules\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 7 % 3\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0\fs24 \cf0 1\cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
> Python Object and Data Structure Basics:\
	\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0

\f6\b \cf0 Name \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Type \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Description
\f0\b0 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Integers\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Int\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Whole numbers\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Float\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 float\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Numbers with decimal point\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Strings\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 str\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Ordered sequence of characters *\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Lists\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 list\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0  Ordered sequence of objects [10,\'94hello\'94,32.00\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Dictionaries\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 dic\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Unordered KEY:VALUE pairs \{\'93key\'94:\'94value\'94,\'94name\'94:\'94frank\'94\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Tuples\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 tup\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Ordered immutable sequence of objects \{10,\'94hello\'94,2.0)\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Sets\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 set\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Unordered collection of UNIQUE objects (\'93a\'94,\'94b)\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Booleans\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 bool \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 Logical value indication TRUE or FALSE10\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth1960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2880
\clvertalc \clshdrawnil \clwWidth2480\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx5760
\clvertalc \clshdrawnil \clwWidth11060\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qr\partightenfactor0
\cf0 Character ->\
Index ->\
Reverse Index ->\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\qc\partightenfactor0
\cf0 H  E  L  L  O\
0  1  2  3  4\
0 -4 -3 -2 -1\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 * Ordered sequence means we can using INDEXING and SLICING to grab sub-section of the sting\
Slicing -> [start:stop:step] \
START - is a numerical index for the slice start\
STOP   - is the index you will go up to ( but not include)\
STEP.   - is the size of the JUMP you take \cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
	
\f6\b # Variable Assignments:
\f0\b0 \
	Rules for variable names\
	- Names can not start with number\
	- There can be no space in the name, use _ instead\
	- Can\'92t use any of these symbols  .\'94\'94<>/?()!@#$%^*~-+\
	- Avoid using Pytnon KEY words\
	- Python uses Dynamic Typing (you can reassign variables to any difference data types), Python is flexible than other languages that are \'91Staticaly-Types\'92\
\
	
\f6\b # Escape Sequence:
\f0\b0 \
	- \\n next line character\
	- \\t tab\
	- \\a sounds bell like from OS\
	- \\\\ backslash, print one backslash\
	- \\\'92 single quote. Prints a single quote\
	- \\\'94 Double quote,  Print a double quote\
	\
\
	# String Indexing and Slicing:\
	# String Properties and String Methods:\
	- Strings are IMMUTABLE. Exp: name =\'92Sam\'92 , name[0]=\'92S\'92 will throw error \
	- String Concatination \'91+\'92\
	- String Multiplication \'91a\'92 * 10. => \'91aaaaaaaaaa\'92\
	- a.upper(), a.lower(), a.split(), a.swapcase(), a.capitalize(), a.title(), a.strip(), a.replace(old,new)\
\
\
	
\f6\b # Print Formatting with Strings:
\f0\b0 \
	- Two methods in string formatting\
	1. .format() method \
		\'91string here\{\} then also \{\}\'92.format(\'91someting1\'92,\'92something2\'92). Exp: print(\'92This is string \{\}\'92.format(\'91INSERTED\'92))\
		Indexed format Exp print(\'92The \{2\} \{1\} \{0\}\'92.format(\'91fox\'92,\'92brown\'92,\'92quick\'92)). => The fox brown quick\
		key word variable format Exp: print(\'92The \{q\} \{b\} \{f\}\'92.format(f=\'91fox\'92,b-\'91brown\'92,q=\'91quick\'92))\
		float formatting \'93\{value:width.precision f\}\'94 Exp: print(\'91The result was \{r:7.4f\}\'92.format(r=result))	\
	2. f-string (formatted string literals)\
		Exp: name =\'93frank\'94  print(f\'92Hello, his name is \{name\}\'92)\
		player =\'91Thomas\'92 points =33  => \'91Last night, \'91+player+\'92 scored \'91+str(points)+\'92 points\'92 # concatenation\
						    => f\'92Last night, \{player\} scored. \{points\} points.\'92           # string formatting\
		formatting with placeholders\
		print(\'91I\'92 am gong to inject %s text here, and %s text here,\'92 %(\'91some\'92,\'92more\'92))\
		with variable x,y=\'91some\'92,\'92more\'92.	=> print(\'91I\'92m going to inject %s here, and %s text here .\'92 %(x,y))\
						    	=> print(\'91I wrote %s programs today\'92 %3.75) => I wrote 3.75 programs today\
							=> print(\'91I wrote %d programs today\'92 %3.75) => I wrote 3 programs toady\
							=> print(\'91floating point numbers: %s.2f\'92 %(13.144) => Floating point numbers:13.14\
							=> print(\'91floating point numbers: %1.0f\'92 %(13.144) => Floating point numbers: 13\
		print(\'91\{0:=<8\} | \{1:-^8\} | \{2:>.8\}\'92.format(\'91left\'92,\'92center\'92,\'92right)	Left==== | -center- | \'85.right\
		print(\'91\{0:=<8\} | \{1:-^8\} | \{2:>.8\}\'92.format(11,22,33)			11===== | \'97-22--- | \'85\'85.33 \
\
	
\f6\b # Lists in Python
\f0\b0 \
	len(list_name), listname.extend(),listname.append(), listname.pop(), listname.pop(indexposition), listname.sort() - don\'92t retur any,  listname.reverse() - don\'92t return any,list.del() deletes at index level, list.remove() - deletes a value\
	- Lists are ordered sequences that can hold a variety of object types\
	- They use [] brackets and commas to separate objects in the list\
	- List support indexing and slicing. Lists can be nested and also have a variety of useful methods that can be called off of them\
	- Two lists can be concatenate \
	- List can be mutable\
	- Ordered sequence can be indexed or sliced\
\
	
\f6\b # Dictionaries
\f0\b0 \
	dictionari[\'91key\'92] - to get value, d.keys(), d.values(), d.items()\
	- Dictionaries are unordered mapping for storing objects.  There is not indexing in dictionary instead it use a key-value pairing.\
	- This key-value pair allows users to quickly grab objects without needing to know an index location. \{\'91key1\'94:\'94value1\'94,\'94key2\'94:\'94value2\'94\}\
	- Dictionaries can be used when a object attached with a key and search fast with no index.\
	- Unordered and can not be sorted.\
	- it can hold another data object type like list or dictionary. my_dic=\{'k1':123,'k2':[0,1,2],'k3':\{'insidekey':100\}\}\
	- can not change key but value can be changed for the specific key\
\
	#
\f6\b  Tuples:
\f0\b0 \
	- t.count(\'91a\'92), t.index(\'91a\'92)\
	- Tuples are very similar to lists.  However they have one key difference - immutability, Once an element is inside a tuple, it can not be reassigned.\
	- Tuples use parenthesis (1,2,3) and can have mixed data type (\'91one\'92,2,[1,2]) \
\
	
\f6\b # Sets:
\f0\b0 \
	- Sets are unordered collection of unique elements, meaning there can only be one representative of the same object.\
	- miset = set(), myset.add(1) \
\
	
\f6\b # Boolean:
\f0\b0 \
	- Booleans are operators that allow you to convey True or False Statements True, False, None\
\
	
\f6\b # I/O with Basic Files in Python:
\f0\b0 \
	myfile = open('myfile.txt') - To assign an object \
	myfile = open("/Users/francispaulraj/Training/myfile.txt) -obsolute path\
	myfile.read() - To read the entire content of text file, and set the postion at the end of the line of the entie file\
	myfile.seek(0) - it reset the positon to '0' after read() method\
	byline.readline() - reads a line\
	myfile.readlines() - reads each lines by lines\
	myfile.close() - to close the cursor\
	myfile.write()\
	myfile.writelines()\
	
\f6\b Reading, Writing, Appending Modes
\f0\b0 \
	mode='r' is ready only\
	mode='w' is write only ( will overwrite files or create new)\
	mode='r+' is reading and writing\
	mode='w+' is writing and reading (overwrites existing files or creates a new files)\
	mode=\'94a\'94 Append a text file.  If the file exist, new data is appended to it.  If the file doesn\'92t exist, its created.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx14830\pardeftab720\pardirnatural\partightenfactor0
\cf0 	mode=\'93a+\'94 Append and read from a a text fie.  If the file exists new data is appended to it. If the file doesn\'92t exist, its created. \
	\
	import pickle,shelve. dump(), load() functions\
	The pickle module allows to pickle and store more complex data in a file.  The shelve module allows to stop and randomly access pickled object in a file. Pickled objects must be stored in a binary file they can\'92t be stored in a text file.\
	mode = \'91rb\'92 Read from a binary file.  If the file doesn\'92t exist, Python will complain with an error.\
	mode = \'91wb\'92 Write to a binary file.  If the file exists, is contents are overwritten.  If the file doesn\'92t exits, its created.\
	mode = \'91ab\'92 Append a binary file.  If the file exists, new data is appended to it.  If the file doesn\'92t exist, its created.\
	mode = \'91rb\'92 Read from and write to a binary file.  If the file doesn\'92t exist, Python will complain with an error.\
	mode = \'91wb\'92 Write to and read from a binary file.  If the file exists, its contents are overwritten.  If the file doesn\'92t exist, it\'92s created.	\
	mode = \'91ab\'92 Append and read from a binary file.  If the file exists, new data is appended to it.  If the file doesn\'92t exist, it\'92s created. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf0 	Python Comparison Operators:\
	
\f0\b0 and, or, not logical operators. You can compare strings that results are based on alphabetical order. Exp: \'91apple\'92 < \'91orange\'92 it True because \'91apple\'92 is alphabetically less than \'91orange\'92\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2220\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3900\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3600\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Operator\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Meaning\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Sample Condition\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Evaluates To\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2220\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3900\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3600\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 ==\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Equal to \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 5 == 5\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 True\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2220\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3900\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3600\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 !=\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Not equal to \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 8 != 5\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 True\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2220\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3900\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3600\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 >\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Greater than\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 3 >10\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 False\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2220\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3900\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3600\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 <\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Less than \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 5 < 8\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 True\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2220\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3900\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3600\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 >=\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Greater than or equal to \cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 5 >= 10\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 False\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth2220\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clwWidth3900\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clwWidth3600\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clwWidth3960\clftsWidth3 \clbrdrt\brdrs\brdrw20\brdrcf14 \clbrdrl\brdrs\brdrw20\brdrcf14 \clbrdrb\brdrs\brdrw20\brdrcf14 \clbrdrr\brdrs\brdrw20\brdrcf14 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 <=\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 Less than or equal to\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 5 <= 5\cell 
\pard\intbl\itap1\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 True\cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 	\
	
\f6\b If, elif, else statements:\
	for loop statements:
\f0\b0 \
	- Many objects in Python are \'92iterable\'92\
	- We can use for loops to execute a block of code for every iteration\
	- The term \'91iterable\'92 means you can \'91iterate over the object. Exp: you can iterate over every character in string, iterate over every item in a list, and key in dictionary.
\f6\b \
	-
\f0\b0  Syntax of a for loop\
		my_iterable = [1,2,3,4]\
		for item_name in my_iterable:\
			print(item_name)\
		
\f5\i\b \cf15 TUPLE WITH TUPLE UNPACKING:
\f0\i0\b0 \cf0 \
			a,b,c =[(1,2,3),(4,5,6),(7,8,9)] # this is example of TUPLE UNPACKING\
			for a,b,c in a,b,c:\
   			#print(f'\{a\}\\n\{b\}\\n\{c\}')\
    			print(f'\{a\} \{b\} \{c\} ',end ="") => result 1 2 3 4 5 6 7 8 9 \
\
		
\f5\i\b DICTETIONARY:\

\f0\i0\b0 		d=\{'k1':1,'k2':2,'k3':3\}\
		for x in d:\
    			print( f' \{x \}\'92, end ="") => result  k1 k2 k3. # 
\f7\i BY DEFAULT IT TAKES KEY VALUE 
\f0\i0 \
\
		d=\{'k1':1,'k2':2,'k3':3\}\
		for key,value in d:\
   			 print( f'\{value\} ', end ="") => result 1 2 3\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	          	}d=\{'k1':1,'k2':2,'k3':3\}\
{\listtext	          	}for key, value in d.items():  # to bring both keys and values\
{\listtext	          	}    print( f'\{value\} ', end ="")  => result 1 2 3\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 		\
		d=\{'k1':1,'k2':2,'k3':3\}\
		for value in d.values():  # to bring values only\
    		    print( f'\{value\} ', end ="")\
	\
	
\f6\b While loops:\
	
\f0\b0 - While loops will continue to execute a block of code \'91while\'92 some condition remains True. Exp: while my dogs are still hungry, keep feeding my dogs.\
	-Syntax of a while loop\
		while some_boolean_condition:\
			#do something\
\
		while some_boolean_condition:\
			#do something\
		else:\
			#do something different\
\
		Exp:\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	          	}x = 0\
{\listtext	          	}while x < 5:\
{\listtext	          	}        print(f'The current value of x is \{x\}')\
{\listtext	          	}        x  += 1\
{\listtext	          	}else:\
{\listtext	          	}    print('X is not less than 5')\
{\listtext	          	}\
{\listtext	          	}The current value of x is 0\
{\listtext	          	}The current value of x is 1\
{\listtext	          	}The current value of x is 2\
{\listtext	          	}The current value of x is 3\
{\listtext	          	}The current value of x is 4\
{\listtext	          	}X is not less than 5\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
	
\f6\b Break, Continue, Pass:
\f0\b0 \
	We can use break, continue, and pass statements in our loops to add additional functionality for various cases.  The three statements are defined by:\
		break: Breaks out of the current closest enclosing loop.\
		continue: Goses to the top of the closest enclosing loop.\
		pass: Does nothing at all\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	          	}mystring = 'Sammy'\
{\listtext	          	}\
{\listtext	          	}for letter in mystring:\
{\listtext	          	}    if letter =='a':\
{\listtext	          	}        continue # if variable 'letter' is 'a' it goes back to the begining of the loop\
{\listtext	          	}    print(f'\{letter\}',end=" ")    => result S m m y\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	          	}mystring = 'Sammy'\
{\listtext	          	}\
{\listtext	          	}for letter in mystring:\
{\listtext	          	}    if letter =='a':\
{\listtext	          	}        continue # if variable 'letter' is 'a' it goes back to the begining of the loop and disconnect the loop\
{\listtext	          	}    print(f'\{letter\}',end=" ")    => result S\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf0 	\
	
\f6\b Useful Operators:\
	- 
\f0\b0\fs26 \cf9 \cb10 \expnd0\expndtw0\kerning0
range(0,10,2) (start, end,step) => generators\
	-  enumerate() function give index portion of a string / list and give tuple output\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf9 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}
\f6\b \expnd0\expndtw0\kerning0
# range()
\f0\b0 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
i = 0\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
while i < 10:\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    print(f'\{i\}',end=" ")\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    i +=1                   => result  0 1 2 3 4 5 6 7 8 9\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
# Similar range can be created by range()\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
list(range(0,10,1)); print('\\n')  => result [0,1,2,3,4,5,6,7,8,9]\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
for x in range(0,10,1):\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    print(f'\{x\}',end=" \'93) => result \kerning1\expnd0\expndtw0 	\expnd0\expndtw0\kerning0
0 1 2 3 4 5 6 7 8 9 \kerning1\expnd0\expndtw0    \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf9 {\listtext	          	}
\f6\b # enumerate()
\f0\b0 \
{\listtext	          	}word = 'abcde'\
{\listtext	          	}print('index  letter')\
{\listtext	          	}for index,letter in enumerate(word):\
{\listtext	          	}    print(f'\{index\}       \{letter\}')\
{\listtext	          	}index  letter\
{\listtext	          	}0       a\
{\listtext	          	}1       b\
{\listtext	          	}2       c\
{\listtext	          	}3       d\
{\listtext	          	}4       e\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf9 {\listtext	         	}
\f6\b # zip()
\f0\b0 \
{\listtext	         	}mylist1 = [1,2,3]\
{\listtext	         	}mylist2 = ['a','b','c']\
{\listtext	         	}mylist3 = [1.25,2.50,3.75]\
{\listtext	         	}for item in zip(mylist1,mylist2,mylist3):\
{\listtext	         	}    print(item)\
{\listtext	         	}(1, 'a', 1.25)\
{\listtext	         	}(2, 'b', 2.5)\
{\listtext	         	}(3, 'c', 3.75)\
{\listtext	         	}    \
{\listtext	         	}# can represent in list like\
{\listtext	         	}list(zip(mylist1,mylist2))  # will give tuples in a list\
{\listtext	         	}[(1, 'a'), (2, 'b'), (3, 'c')]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 	\
		
\f6\b # in operator
\f0\b0 \
		'x' in ['x','avier\'92]. => result \'92True\'92 boolean\
		\'91mike\'92 in \{\'91mike\'92:345\} => result \'91True\'92\
\
		
\f6\b min(), max(), random(), input() int()\
\
	# List Comprehensions:\
\
           Basics Syntax: [expression for item in iterable]\
           with Conditional Logic: [expression for item in iterable if condition]\
           Nested List Comprehension: [expression for item1 in iiterable1 for item2 in iterable2]\
\
#317 nested for 
\f0\b0 = > [[s.upper() for s in row] for row in csv_reader]
\f6\b \
	
\f0\b0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf9 {\listtext	          	}mystring ='Hello'\
{\listtext	          	}\
{\listtext	          	}mylist = [ ]\
{\listtext	          	}\
{\listtext	          	}for letter in mystring:\
{\listtext	          	}    mylist.append(letter)\
{\listtext	          	}    \
{\listtext	          	}mylist\
{\listtext	          	}\
{\listtext	          	}['H', 'e', 'l', 'l', 'o']\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0
\f0\b0 \cf9 {\listtext	           	}# short method for list comperhence is \
{\listtext	           	}mylist = [letter for letter in mystring]\
{\listtext	           	}mylist => result  ['H', 'e', 'l', 'l', 'o']\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 		\
		mylist = [num**2 for num in range(0,11)] => result [0,1,4,9,16,25,36,49,64,81,100]\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf16 		mylist = [num for num  in range(0,11) if num%2==0]. => result [0, 2, 4, 6, 8, 10]\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf16 {\listtext	          	}mylist =[]\
{\listtext	          	}for num in range(0,11):\
{\listtext	          	}    if num%2 ==0:\
{\listtext	          	}        mylist.append(num)\
{\listtext	          	}mylist\
{\listtext	          	}[0, 2, 4, 6, 8, 10]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 		
\f8\fs26\fsmilli13200 \cf17 \cb18 \expnd0\expndtw0\kerning0
[\cf0 i 
\f9\b \cf19 for
\f8\b0 \cf0  i 
\f9\b \cf19 in
\f8\b0 \cf0  range\cf17 (\cf0 8\cf17 )\cf0  
\f9\b \cf19 if
\f8\b0 \cf0  i%2!=0\cf17 ]
\f0\fs26 \cf9 \cb10 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf20 		results = [x if x%2 ==0 else \'91ODD\'92 for x in range(0,11)]\
		result => [0, 'ODD', 2, 'ODD', 4, 'ODD', 6, 'ODD', 8, 'ODD', 10]\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf20 {\listtext	          	}result = []\
{\listtext	          	}for x in range(0,11):\
{\listtext	          	}    if x%2 ==0:\
{\listtext	          	}        result.append(x)\
{\listtext	          	}    else:\
{\listtext	          	}        result.append("ODD")\
{\listtext	          	}\
{\listtext	          	}result\
{\listtext	          	}[0, 'ODD', 2, 'ODD', 4, 'ODD', 6, 'ODD', 8, 'ODD', 10]\cf9 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 		['Gram Pos Species' if x==1 else 'Gram Neg Species' if x == 2  else 'Other' for x in lst]\
\
		[ps.stem(word) for word in review if not word in stopwords.words(\'91english\'92)]	\
\
		[num * 2 if num%2 ==2 else num/2 for num in numbers]\
		[ [ \'91X\'92 if  num %2 = 0 else \'92O\'92 for num in range(1,4)] for val in range(1,4)]\
	\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf21 		celcius =[0,10,20,34.5]\
		Fahrenheit = [ ((9/5)*temp +32) for temp in celcius]\
		Fahrenheit => result 
\f10\fs28 \expnd0\expndtw0\kerning0
[32.0, 50.0, 68.0, 94.1]
\f0\fs26 \kerning1\expnd0\expndtw0 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf21 {\listtext	          	}celcius =[0,10,20,34.5]\
{\listtext	          	}fahrenheit = []\
{\listtext	          	}for x in celcius:\
{\listtext	          	}    fahrenheit.append((9/5*x)+32)\
{\listtext	          	}    \
{\listtext	          	}fahrenheit.  => result 
\f10\fs28 \expnd0\expndtw0\kerning0
[32.0, 50.0, 68.0, 94.1]\
\pard\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf21 	\
	Dictionary Comprehension:\
	str1 =\'91ABC\'92 , Str2 = \'93123\'94\
	combo=\{str1[I]:str2[I] for k in range(0,len(str1))\}\
	instructor= \{\'91name\'92=\'91colt\'92,\'92city\'92=\'91San Francisco\'92,\'92color\'92:\'92purple\'92\}\
	itstruc= \{k.upper():v.upper() for k,v in instructor.items()\}\
	num_list = [1,2,3,4]\
	(num:(\'91even\'92 if num%2==0 else \'91odd\'92 for num in num_list\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf21 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 		Nexted Loop:\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0
\f10\b0 \cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
mylist =[(x*y) for x in [1,2,3] for y in [1,10,100]]\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
mylist =>[1, 10, 100, 2, 20, 200, 3, 30, 300]\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
mylist =[]\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
for x in [1,2,3]:\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    for y in [1,10,100]:\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        mylist.append(x*y)\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
mylist => [1, 10, 100, 2, 20, 200, 3, 30, 300]\
\ls13\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf21 	[feature for feature in dataset.columns if data[feature].datatypes==0] to get categorical columns\
	Dictonary Comprehension\
	\{x:x**2 for x in range(10)\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\fs26 \cf9 \kerning1\expnd0\expndtw0 \
	
\f6\b # METHODS AND FUNCTIONS\
	# Methods:\
	
\f0\b0 - Buit is objects in Python. Methods are similar to functions.  The main difference is that a built-in functions, like input(), can be called on its own.  But a string method has to be called through a particular string. \
	
\f6\b # Functions:\

\f0\b0 	- Functions allow us to create blocks of code that can be easily executed many times, without needing to constantly rewrite he entire block of code\
	- Typically we use the return keyword to send back the result of the function, instead of just printing it out\
	-  return allows us to assign the output of the function to a new variable\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx10397\tx11760\pardeftab720\pardirnatural\partightenfactor0
\cf9 	\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 	- Syntax \
		def name_of_function():\
		\'93\'94\'94\
		Docstring explains functions\
		\'93\'94\'94\
		print(\'91Hello\'92)\
	> name_of_function()\
	>Hello\
\
	===== function with parameter ====\
		def name_of_function(name):\
		\'93\'94\'94\
		Docstring explains functions\
		\'93\'94\'94\
		print(\'91Hello\'92+name)\
	> name_of_function(\'91Jose)\
	>Hello Jose\
\
	===== return function with parameter ====\
		def name_of_function(num1,num2):\
		return num1+num2\
	> result = name_of_function(1,2)\
	>print(result)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 	*args and **kwargs in python: (Arguments and keyword arguments)\
	
\f0\b0 - in order to work with multiple positional arguments in sum(), we have to pass as tuple\
	-def myfunc(*args): # creates tuple data type structure and allow to pass multiple values\
    		return sum(args) * 0.5 =>
\f6\b \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 \
	- 
\f5\i\b def myfunc(**kwargs): # **kwargs creted dictionary and allows to pass multiple 'key' 'values'
\f0\i0\b0 \
        		print(kwargs)\
        		if 'fruits' in kwargs:\
            		print('My fruit of choice is \{\}'.formar(kwargs['fruit']))\
       		 else:\
           		 print('I did not find any fruit here')\
	-myfunc(fruit='apple',veggie='lettuce') => 
\f10\fs28 \cf15 \expnd0\expndtw0\kerning0
\{'fruit': 'apple', 'veggie': 'lettuce'\}\
\pard\pardeftab720\sl320\partightenfactor0
\cf15 								I did not find any fruit here\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\fs26 \cf9 \kerning1\expnd0\expndtw0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls14\ilvl0\cf9 {\listtext	          	}
\f6\b COMBINATION OF *args and **kwargs
\f0\b0 \
{\listtext	          	}\
{\listtext	          	}def myfunc(*args,**kwargs):\
{\listtext	          	}    print(args)\
{\listtext	          	}    print(kwargs)\
{\listtext	          	}    print('I would like \{\} \{\}'.format(args[0],kwargs['food']))\
{\listtext	          	}\
{\listtext	          	}myfunc(10,20,30,fruit='orange',food='eggs',animal='dog')\
{\listtext	          	}(10, 20, 30)\
{\listtext	          	}\{'fruit': 'orange', 'food': 'eggs', 'animal': 'dog'\}\
{\listtext	          	}I would like 10 eggs\
{\listtext	          	}\
{\listtext	          	}dic1 = \{'a':1,'b':2\}\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf9  		          dic2 = \{'b':3,'c':4\}\
		          merged_dict = (**dict1,**dict2)\
		          print(merged_dict)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 #176 *args Stores in tuple
\f0\b0 \
	def sum_all_nums(num1,*args):\
	print(num1)\
	total=0\
		for num in args:\
		total += num\
	return total\
\
	print(sum_all_nums(4,5,6,7,9)\
\

\f6\b #178 **kwargs stores in dictionary\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 dev fav_colors(**kwargs):\
	for person, color in kwargs.items():\
	print(f\'92\{persons\}\'92, favorite color is \{color\}\'92\
\
fav_colors(colt=\'91purple\'92, ruby=\'91red\'92, ehel=\'91teal\'92)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 #180 Ordering Parameter:\
1. Paramer 2. *args 3. Default Parameter 4. **kwargs\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 def display_info(alb,*args,instructor=\'91colt\'92,**kwargs):\
return [a,b,args,omstrictpr,kwargs]\
\
print(display_info(1,2,3,last_name=\'91steele\'92,job=\'91instructor\'92)) => a =1,b=2,args = (3,),instructor = \'91colt, kwargs\{\'92last_name\'92:\'92Steele\'92,\'92job\'92:\'92Instructor\'92\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 #181 Using * as an argument - argument unpacking:\
We can use * as an argument to a function to unpack values\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 	def sum_all_nums(num1,*args):\
	print(num1)\
	total=0\
		for num in args:\
		total += num\
	return total\
\
	nums = [1,2,3,4,5,6] \
	print(sum_all_nums(
\f6\b *nums
\f0\b0 )\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 #183 Dictionary unpacking - Using ** as an Argument:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 def display_names(first,second):\
	print(f\'92\{first\} says hello to \{second\}\'92)\
	names = \{\'91first\'92:\'92cold\'92,\'92second\'92:\'92rusty\'92
\f6\b \}\

\f0\b0 display_names
\f6\b (**names)\
\

\f0\b0 def add_and_multiply_numbers(alb, c,**kwargs):\
	print(a+b+c)\
	print(\'91OTHER STUFF\'85..\'94)\
	print(kwargs)\
\
data = dict(a=1,b=2,c=3,d=5,name=\'91Tony\'92)\
add_abd_multiply_numbsrs(
\f6\b **data
\f0\b0 )
\f6\b \
\
\
\

\f0\b0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 	# Lambda Expressions Map and Filter:\
	
\f0\b0 - map(func, *iterables) -> map objects\
	- Make an iterator that computes the function using arguments from each of the iterables.  Stops when the shortest iterable is exhausted.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf9 {\listtext	          	}def squre(num):\
{\listtext	          	}    return num **2\
{\listtext	          	}\
{\listtext	          	}my_num = [1,2,3,4,5]\
{\listtext	          	}for item in map(squre, my_num):\
{\listtext	          	}    print(item, end =' ') => returns 
\f10\fs28 \cf15 \expnd0\expndtw0\kerning0
1 4 9 16 25 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 		# ======in list form ======\
\
		list(map(squre,my_num)) => [1, 4, 9, 16, 25]\
		list(map(lambda num: num**2,my_num)) 
\f11\b #LAMBDA Functon
\f10\b0 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
def splicer(mystring):\
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    if len(mystring)%2 ==0:\
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return 'EVEN'\
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    else:\
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return mystring[0]\
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    \
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
name =['Andy','Eve','Sally']\
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
list(map(splicer,name)) => ['EVEN', 'E', 'S']\
\ls17\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}list(map(lambda. x:x[0],name)) #LAMBDA Function => A,E,S\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf15 {\listtext	\uc0\u8259 	}list(map(lambda. x:x[::-1],name)) #LAMBDA Function => revers the string\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 		Syntex:\
		lambda argument:expression\
		addition = lambda a,b = a+b\
		print(addition(5,6))\
\
		str = '1,2,3,'\
		x = list(map(int,str))\
\
		words = ['apple','banana','cherry']\
		upper_words = list(map(str.upper,words))\
\
		numbers = [1,2,3,4,5,6,7,8,9]\
		greater_than_five = list(filter(lambda x:x>5,numbers))\
		ever_and_greater_than_five = list(filter(lambda x:x>5 and x%2 ==0,numbers))\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 	#Filter Function:\
	
\f10\b0 - Filter function acts only if the applied function returns TRUE / FALSE\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
def check_even(num):\
\ls18\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    return num%2 ==0\
\ls18\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls18\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
mynums =[1,2,3,4,5,6,7]\
\ls18\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
list(filter(check_even,mynums)) => [2, 4, 6]\
\ls18\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}list(filter(lambda num: num%2==0,mynums)) 
\f11\b #LAMBDA Function
\f10\b0 \expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 \
	
\f1\b LAMBDA EXPRESSION\cb1 \uc0\u8232 
\f2\b0 \cb10 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl340\partightenfactor0
\ls19\ilvl0
\f1\b \cf15 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Lambda function is anonymous function, used when functin requred for onc time only\cb1 \
\ls19\ilvl0\cb10 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Lambda function works in conjucton with MA\{ / FILTER Fuction\cb1 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls20\ilvl0
\f10\b0 \cf15 \cb10 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
def squre(num):\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    result = num**2\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    return result\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
# can be re-written as\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
def squre(num):\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    return num**2\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
# still can be re-written as \
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
def squre(num): return num**2\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
# Turn this into lamda expression as\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
squre=lambda num: num**2\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
# Usually lambda function works in conjunction with MAP / Filter function\
\ls20\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
list(map(lambda num: num**2,mynums)) => [1, 4, 9, 16, 25, 36, 49]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 #185 cube = lambda num  : num**3\
cube(3)\
\
#187 MAP:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10\b0 \cf15 # A standard function that accepts at least two arguments, a function and an \'91utterable\'92\
# Utterable - something that can be iterated over (list, string, dictionaries, sets, tuples)\
# Runs the lambda for each value in the utterable and returns a map object which can be converted into another data structure\
doubles = map(lambda x:x*2,nums)\
nums = [1,2,3,4,5]\
\
people = [\'91Darcy\'92,\'92Christina\'92,\'92Dana\'92,\'92Annabel\'92]\
peeps = list(map(lambda name: name.upper(),people))\
\
names = [\{\'91first\'92:\'92Rusty\'92,\'92last\'92:\'92Steele\'92\},\{\'91first\'92:\'92Colt\'92,\'92last\'92:\'92Steele\'92,\'92first\'92:\'92Blue\'92,\'92last\'92:\'92Steele\'92\}]\
\
first_name = map(lambda x:x[\'91first\'92],names)\
\
nums=[20,14,11]\
decrement = map(lambda num:num-1,nums)\
\
OR\
\
def decrement_list(l):\
    return list(map(lambda n: n-1, l))\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 #189 Filter:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10\b0 \cf15 # There is a lambda for each value in the utterable\
# Returns filter object which can be converted into other iterables\
# The object contains only the values that return true to the lambda\
\
l=[1,2,3,4]\
evens = list(filter(lambda x:x%2 ==2,l))\
\
names = ['Austin','penny','Anthony','angle','billy']\
new_name = list(filter(lambda x: x.lower()[0]=='a',names))\
\
\
users = [\{\'91username\'92:\'92Samuel\'92,\'92tweets\'92:[\'91I Love Cakes\'92,\'92I Love Coffee\'92]\},\
\{\'91username\'92:\'92jeff\'92,\'92tweets\'92:[\'91I Love Cat\'92]\},\
\{\'91username\'92:\'92bob123\'92,\'92tweets\'92:[]\}\
\{\'91username\'92:\'92Katie\'92,\'92tweets\'92:[]\}\
interactive = list(filter(lambda u: not u[tweets], users))\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 \
Combining filter and map\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10\b0 \cf15 names = [\'91Lassie\'92,\'92Colt\'92,\'92Rusty\'92]\
list(map(lambda x:f\'92your instructor is \{x\}\'92,filter(lambda value:len(value <5,name)))\
\
OR with List Comprehencetion\
[f\'92your instructor is \{x\}  for x in names if len(x) <5)]
\f11\b \

\f10\b0  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 #191 Built in Functions All/Any:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10\b0 \cf15 all - Return True if all elements of the iterable are truths (or if the utterable is empty)\
all([char for char in \'91eio\'92 if char in \'91aeiou\'92])\
all([num for num in [1,2,4,6,8] I funk%2 ==0]) => False\
\
Any - Return True if any element of the utterable is truthy. If the utterable is empty, return False\
any([0,1,2,3]) => True\
any([val for val in [1,2,3] if val >2]) => True\
any([val for val in [1,2,3] if val >5]) => False\
\
\pard\pardeftab720\partightenfactor0

\f3 \cf22 \cb23 from\cf24  functools \cf22 import\cf24  reduce\
\
my_list = [[\cf25 1\cf24 ], [\cf25 2\cf24 , \cf25 3\cf24 ], [\cf25 4\cf24 , \cf25 5\cf24 , \cf25 6\cf24 , \cf25 7\cf24 ]]\
\cf22 print\cf24 (reduce(\cf22 lambda\cf24  x, y: x+y, my_list))\cf26 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10 \cf15 \cb10 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 #194 sorted():\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10\b0 \cf15 users = [\{\'91username\'92:\'92Samuel\'92,\'92tweets\'92:[\'91I Love Cakes\'92,\'92I Love Coffee\'92]\},\
\{\'91username\'92:\'92jeff\'92,\'92tweets\'92:[\'91I Love Cat\'92]\},\
\{\'91username\'92:\'92bob123\'92,\'92tweets\'92:[]\}\
\{\'91username\'92:\'92Katie\'92,\'92tweets\'92:[]\}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f12\i\b \cf15 sorted(users,key=lambda x:x[\'91username\'92],users, reverse=True)\
\
#195 Min() / Max():\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10\i0\b0 \cf15 names = [\'91Arya\'92,\'92Samson\'92,\'92Dora\'92,\'92Tim\'92,\'92Slivander\'92]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f12\i\b \cf15 min(len(i) for I in names)\
max(names,key=lambda x:len(x))\
max(names,key=lambda x:x[\'92tweets\'92])[\'91username\'92]\
\
#197 reversed():\
#198 len():\
#199 abs(),round(),sum():\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10\i0\b0 \cf15 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 #203 zip unpacking:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f10\b0 \cf15 five_by_two = [(0,1),(1,2),(2,3),(3,4),(4,5)]\
list(
\f12\i\b zip(*five_by_two)
\f10\i0\b0 ) => [(0,1,2,3,4),(1,2,3,4,5)]\
\
midterms = [80,91,78]\
finals = [98,89,53]\
students = [\'91dan\'92,\'92ang\'92,\'92Kate\'92]\
final_grades = \{ n[0]:max(n[1],n[2])for n in zip(students, midterms, finals)\}\
\
OR\
\
grades = zip(students, map(lambda pair:max(pair),zip(midterms,finals)))\
print(dict(grades))\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 	# Nested Statements and Scope:\
	
\f10\b0 - LEGB Rule\
		L Local - Names assigned in any way within a function (def or lambda), and not declared global in that function\
		E Enclosing function locals - Names in the local scope of any and all enclosing functions (def or lambda), from inner to outer\
		G Global(module) - Names assigned at the top-level of a nodule file, or declared global in a def within the file.\
		B Built-in (Python) - Names preassigned in the built-in names module like\'85 open, range, SyntaxError,..\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
name ='THIS IS A GLOBAL STRING' # global variable (G) 3\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
def outer():\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    name = 'Sammy'# acts as Enclosing function local (E) 2\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def inner(): # no local variable assinged (L)\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        #name = 'I AM LOCAL' #local variable assigned (L) 1\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        print('Hello ',name)\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    inner()\
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    \
\ls21\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
outer() => Hello Sammy\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}
\f11\b \cf27 \expnd0\expndtw0\kerning0
def count_prime(num):\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf27 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    primes = [2]\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    x = 3\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    if num < 2:\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return 0\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    while x <= num:\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        for y in primes:  # use the primes list!\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
            if x%y == 0:\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
                x += 2\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
                break\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        else:\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
            primes.append(x)\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
            x += 2\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    print(primes)\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    return len(primes)\
\ls22\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf27 	# 45  def check_even_list(num_list):\
			for number in num_list:\
				if number % 2 == 0:\
					return True\
				else:\
					pass (don\'92t do return False here)\
			return False\
	\
	#46 \
		def myfunc(*args):\
			print(args\
		myfunc(20,30,59,18)\
\
	#49 def myfunc(**kwargs):\
			if \'91fruit\'92 in kwargs:\
				print(\'91My fruit of choice is \{\}\'92.format(kwargs[\'91fruit\'92]))\
			else:\
				print(\'91I did not find any fruit here\'92)\
		myfunc(fruit=\'91apple\'92,veggie=\'91lettuce\'92)\
\
	#50 def myfunc(*args,**kwargs):\
			print(\'91I would like \{\} \{\}\'92.format(args[0],kwargs[\'91food\'92]))\
		myfunc(10,20,30,fruit=\'91orange\'92,food=\'91eggs\'92,animal=\'91dog\'92)\
\
	\
			\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 	# Object Oriented Programming(OOPs):\
	
\f10\b0 Software objects combine characteristics (called attributes in OOPs) and behaviors (called methods in OOPs). Exp if you were  to Crete an alien spacecraft object, 	its attributes could include its location and energy level, while its methods could include its ability to move or fire its weapons. \

\f11\b 	\
	
\f10\b0 Objects are created ( or instantiated in OOPs) from a definition called a class - programming code that an define attributes and methods. Classes ae like blueprints.  	A class isn\'92t an object, it\'92s a design for one.  And just as a foreman can create many houses from the same blueprint, a programmer can create many objects from the 	same class.  As a result, each object (also called an instance) instantiated from the same class will have a similar structure. \
\
	s
\f11\b elf -
\f10\b0  Every instance method - a method that every object of a class has must have a special first parameter called \'91self\'92 by convention.  This parameter provides a 	way for a method to refer to the object itself. \
\
	
\f11\b \cf0 Constructors
\f10\b0 \cf15  - that is automatically invoked right after a new object is created.  A constructor method is usually used to set up the initial attribute values of an 	object\
	\
	A
\f11\b ttributes
\f10\b0  - Object\'92s attributes automatically created and initialized just after it\'92s instantiated through its constructor method. \
\
	
\f11\b Class Attributes
\f10\b0  - Class attribute exists before a single object is created.  So you can use a class attribute without any objects of the class in existence.Although you can use an object of a class to access a class attribute, you can\'92t assign a new value to a class attribute through an object. If you want to change the 	value of a class attribute, access it through its class name.\
\
	
\f11\b Static Method -
\f10\b0  In the definition of static method doesn\'92t have \'91self\'92 in its parameter.  That\'92s because, like all static methods, it\'92s designed to be invoked 	through a class and not an object. So the method won\'92t be passed a reference to an object and therefore won\'92t need a parameter, like \'91self\'92 to receive such a reference.\
we cn invoke the static method through class.staticmetod()\
\
\
	class Critter(object): \cf27 #defining a class\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 		\'93\'94\'94 A virtual pet\'94\'94\'94\
		total = 0 \cf27 # class attribute or static attribute\
	\
		\cf15 @staticmethod\
		def status(): \cf27 # since it uses static class attribute its called static method and note that the definition doesn\'92t have self in its parameter list \cf15 \
			print(\'92The total number of critters is , Critter.total\
\
		def __init__(self,name): \cf28 #Constructor method or initialization method, name - is attribute.\cf15 \
			print(\'91A new critter has been born\'92)\
			self.name = name\
\
		def __str__(self)\
			rep = \'91Tritte object\\n\'92\
			rep = \'91name:\'92 + self.name +\\n	\
			return rep\
\
		def talk(self):\cf27  # defining a method\cf15 \
			print(\'93Hi, I am an instance of class Ritter\'94)\
	#main\
	crit = Critter() \cf20 #instantiating an object\cf15 \
	crit.talk() \cf27 #invoking a method\
\
	
\f11\b \cf15 Using Private Attributes and Private Methods:\
	
\f10\b0 By default, all of an object\'92s attributes and methods are public, meaning that they can be directly accessed or invoked by a client.  To encourage encapsulation, you can define an attribute or method as private,  meaning that only other methods of the object itself can easily access or invoke them.\
\
	Private methods can be created by adding two leading underscores to the name. This private method can easily be accessed by any other method in the class. Like private attributes.  Private methods are meant only to be accessed by an object\'92s own methods.\
\
	
\f11\b Properties:\
	
\f10\b0 One way to control access to a private attribute is to create a property - an object with methods that allow indirect access to attributes and often impose some sort of restriction on that access.\
	\
	class Critter(object): \cf27 #defining a class\
\cf15 		\'93\'94\'94 A virtual pet\'94\'94\'94\
		total = 0 \cf27 # class attribute or static attribute\
	\
		\cf15 @staticmethod\
		def status(): \cf27 # since it uses static class attribute its called static method and note that the definition doesn\'92t have self in its parameter list \cf15 \
			print(\'92The total number of critters is , Critter.total\
\
		def __init__(self,name,mood): \cf28 #Constructor method or initialization method, name - is attribute.\cf15 \
			print(\'91A new critter has been born\'92)\
			self.name = name \cf27 # public attribute\cf15 \
			self.__mood = mood \cf27 # private attribute\cf15 \
\
		def __str__(self)\
			rep = \'91Tritte object\\n\'92\
			rep = \'91name:\'92 + self.name +\\n	\
			return rep\
\
		def talk(self):\cf27  # defining a method\cf15 \
			print(\'91\\n I am \'91,self.name) \cf27 # accessing public attribute in a method\
\cf15 			print(\'91Right now I feel\'92,self.__mood) \cf27 # accessing private attribute in a method with in a class\
\
		\cf0 def __private_method(self): \cf27 #creating and definition of private method\cf0 \
			print(\'91This is a private method\'92)\
\
		def public_method(self):\
			print(\'91This is public method\'92)\
			self.__private_method() \cf27 # accessing private method by public methods within the same class\
\
		\cf15 @property\
		def mood(self): \cf28 #note method name is same like private attribute with out two __. To access private attribute out of class\cf15 \
			return self.__mood\
\
		@mood.setter \
		def mood(self, new_mood):  \cf28 # to change the value of private attribute from out of class\cf15 \
			if new_mood ==\'91\'92\
				print(\'91A critter mood can not be empty string\'92)\
			else:\
				self.__mood = new_mood\
				print(\'91Mood change successful\'92)\cf27 \
\cf15 	#main\
	crit = Critter() \cf20 #instantiating an object\cf15 \
	crit.talk() \cf27 #invoking a method\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf15 \
\
	
\f10\b0 - OOPs allows programmers to create their own objects that have methods and attributes,\
	- Recall that after defining a string list, dictionary, or other objects, you were able to call methods off of them with the .method_name() syntax.\
	- These methods act as functions that use information about the object, as well as the object itself to return results, or change the current object.\
	- OOPS allows users to create their own objects. \
	- When to implement Privacy\
		When you write a class\
			* 	Creare methods to reduce the need for clients to directly access an object\'92s attributes.\
			*	Use privacy for those attributes and methods that are completely internal to the operation of objects\
		When you use an object\
			* 	Minimize the direct reading of an object\'92s attributes\
			* 	Avoid directly altering an object\'92s attributes\
			* 	Never attempt to directly access an object\'92s private attributes or methods. \
			  \
	Format of OOPs:\
\
	class NameOfClass():\
\
		# CLASS OBJECT ATTRIBUTE\
		# SAME FOR ANY INSTANCE OF A CLASS\
		species = \'91mammal\'92\
\
		def_init_(self,param_name1,param_name2):  \
\
			# Attributes\
			# We take the argument\
			# Assign it using self.attribute name\
			#param1,param2 are parameter of a class\
			self.attribute_namepa1=param1\
			self.param2=param2\
\
		def some_method(self):\
			#perform some action\
			print(self.param1)\
\
			* Attribute is characteristic of an object\
\
			* METHODS are functions defined inside the body of a class they used to perform operations. Functions acting o the object that take the objects itself 			into an account through the use of self arguments\
\
	class Circle():\
    #CLASS OBJECT ATTRIBUTE\
    \
    pi=3.14\
    \
    def __init__(self,radius):\
        self.radius = radius\
        self.area = radius **2 * self.pi\
    # METHOD\
    def circumference(self):\
        return 2 * self.pi * self.radius #self.pi can be written as Circle.pi\
\
	==================================\
\
class Dog():\
    #CLASS OBJECT ATTRIBUTES\
    species ='mammal'\
    \
    def __init__(self,breed,name,sports):\
        #breed,name,sports are variables / parameters for class Dog)\
        \
        # ATTRIBUTES\
        # TAAKES AN ARGUMENT\
        # ASSIGN IT USING SELF.ATTRIBUTENAME\
        # ATTRIBUTENAME CAN BE ANY NAME BUT USUALLY IT IS PARAMETER NAME\
        \
        self.breed = breed\
        self.any_name_attribute = name\
        self.sports=sports\
    \
    # OPERATIONS/ Actions --> Methods (functions within a Class )\
    \
    def bark(self,number):#number is a variable / paramert value for this method ONLY\
        print('WOOF ! My name is \{\} and my age is \{\}'.format(self.any_name_attribute,number))#NOTE no self.number\
        \
        ===================================\
\
	INHERENTEANCE AND POLYMORPRISM:\
	\
	#OOPs INHERITANCE\
\
			class Animal(): #base class or super class\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls23\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    \
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __init__(self): #created base method from base classs\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        print('ANIMAL CREATED')\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def who_am_i(self):\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        print('I am a Animal')\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def eat(self):\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        print('I am eating')\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    \
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
class Dog(Animal): #inheriting base class 'Animal'\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __init__(self):\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        Animal.__init__(self)  #inheriting and re-initializing base class methed\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        print('Dog Created')\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def eat(self):\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        print('I am Dog and eating') #Metod ovride from base class method\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def bark(self):\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        print('WOOF') #Add on method aport from base class\
\ls23\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 	# POLYMORPHISM:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
class Dog():\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __init__(self,name):\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        self.name = name\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def speak(self):\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return self.name + ' says WOOF'\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
class Cat():\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __init__(self,name):\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        self.name = name\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def speak(self):\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return self.name + ' says Meou'\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
#object initiation\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
niko = Dog('nike')\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
felix = Cat('felix')\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
'''\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
for i in [niko,felix]:\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    print(i.speak())\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
nike says WOOF\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
felix says Meou\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
def pet_function(pet):\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    print(pet.speak())\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    \
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
pet_function(niko) => nike says WOOF\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
pet_function(felix) => felix says Meou\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
'''\
\ls24\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf27 	
\f1 \cf15 ABSTRACT CLASS AND INHERETANCE
\f2\b0 \
\pard\pardeftab720\sl320\partightenfactor0
\cf15 	ABSTRACT class NEVER expect to instanciate\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls25\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
class Animal():\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __init__(self,name):\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        self.name = name\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def speak(self): #ABSTRACT METHOD\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        raise NotImplementedError("Subclass must implement this abstract methd")\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
class Dog(Animal): #inheretance of Animal Class\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def speak(self): # abstract method inherited from base class NO REINITIATION\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return self.name + ' says WOOF!'\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
class Cat(Animal):\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def speak(self):\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return self.name + ' says meow'\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    #========== We did not create instance of a class Animal to call its methods\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
fido = Dog('Fido')\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
isis = Cat('Isis')\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
'''\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
fido.speak()\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
'Fido says WOOF!'\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
isis.speak()\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
'Isis says meow'\
\ls25\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
'''\
\pard\pardeftab720\sl320\partightenfactor0
\cf15 \
\pard\tx720\pardeftab720\sl320\partightenfactor0
\cf15 	
\f1\b Special Classes in Python:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls26\ilvl0
\f2\b0 \cf15 \kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
class Book():\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __init__(self,title,author,pages):\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        self.title = title\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        self.author= author\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        self.pages = pages\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __Str__(self):\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return f'\{self.title\} by \{self.author\}'\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __len__(self):\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        return self.pages\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
    def __del__(self):\
\ls26\ilvl0\kerning1\expnd0\expndtw0 {\listtext	          	}\expnd0\expndtw0\kerning0
        print('A book object has been deleted')\
\pard\pardeftab720\sl320\partightenfactor0
\cf15 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\b \cf15 #254: Special Methods:
\f2\b0 \
The + operation is shorthand for a special method called __add() that gets called on the firs operand. . If the dirst(left) \
Operand is an instance of int, __all() does mathematical addition. If it\'92s a string, It does string concatenation\
	__repr__(sef)\
	__add(self)\
	object.__init__(self)\
	object.__del__(self)\
	object.__repr__(self)\
	object.__str__(self)\
	object.__bytes__(self)\
	object.__format__(self.formattypes)\
	object.__len__(self)\
	object.__length_hint__(self)\
	object.__missing__(self,key)\
	object.__setiem_(self,key,value)\
	object.__delitem__,key(self)\
	object.__item__(self)\
	object.__reveresed__(self)\
	object.__contains__(self,item)\
\
# Emulating numeric types:\
\
	object.__add__(self, other)\
	object.__sub__(self, other)\
	object.__mul__(self, other)\
	object.__matmul__(self, other)\
	object.__truediv__(self, other)\
	object.__mod__(self, other)\
	object.__add__(self, other)\
	object.__divmod__(self, other)\
	object.__pow__(self, other)\
	object.__lshift__(self, other)\
	object.__rshift__(self, other)\
	object.__and__(self, other)\
	object.__xor__(self, other)\
	object.__or__(self, other)	\
	object.__add__(self, other)\
\
	object.__radd__(self, other)\
	object.__fsub__(self, other)\
	object.__rmul__(self, other)\
	object.__rmatmul__(self, other)\
	object.__rtruediv__(self, other)\
	object.__rmod__(self, other)\
	object.__rdivmod__(self, other)\
	object.__rpow__(self, other)\
	object.__lshift__(self, other)\
	object.__rrrshift__(self, other)\
	object.__and__(self, other)\
	object.__rxor__(self, other)\
	object.__ror__(self, other)	\
\
\
\pard\tx720\pardeftab720\sl320\partightenfactor0
\cf15 \

\f1\b #261 Method Resolution Order (MRO)
\f2\b0 \
'''\
Whenever you create a class, Python sets a Method Resolution Order, or MRO, for that \
class whic is the order in which Python will look for methods on instances of that class.\
\
You can programmatically reference the MRO three ways:\
__mro__ attribute on the class\
user the mro() method on the class\
 use the builtin helps(cls) method\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f11\b \cf27 \
\pard\pardeftab720\sl320\partightenfactor0

\f10\b0 \cf15 	
\f11\b # Complete Python Bootcamp:\
	
\f10\b0 - Modules are just .py scripts that you in another .py script\
	- Packages are a collection of module\
	-  inside a folder of python to let python know under these folded are python p	ackages \
\
	__name__ = __main__\
	Sometimes when you are importing from a module, you would like to know whether a modules function is being used as an import, or if you are 	using the original.py file of that module. \
\
	#one.py\
	def func():\
    		print('FUNC() IN ONE.PY' )\
	print('TOP LEVEL IN ONE.PY')\
\
	if __name__ == '__main__':\
    		print('ONE.PY is being run directly')\
	else:\
    		print('ONE.PY has been imported')\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls27\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
#two.py\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
import one\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
print('TOP LEVEL IN TWO.PY')\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
one.func()\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
if __name__ == '__main__':\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
    print('TWO.PY is being run directly')\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
else:\
\ls27\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
    print('TWO.PY has been imported')\
\pard\pardeftab720\sl320\partightenfactor0
\cf15 \
	
\f11\b # Error and Exception Handling:\
	IOError 
\f10\b0 - Raised when an I/O operation fails, such when attempt is made to open a nonexistent file in read mode
\f11\b \
	IndexError 
\f10\b0 - Raised when a sequence is indexed with a number of a nonexistent element
\f11\b \
	KeyError
\f10\b0  - Raised when a dictionary key is not found
\f11\b \
	NameError
\f10\b0  
\f11\b - 
\f10\b0 Raised when a name (of a variable or function) is not found\
\pard\pardeftab720\sl320\partightenfactor0

\f11\b \cf15 	SyntaxError 
\f10\b0 - Raised when a syntax error is encountered.
\f11\b \
	TypeError 
\f10\b0 - Raised when a built-in operation or function is applied to an object of inappropriate type
\f11\b \
	ValueError 
\f10\b0 - Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value
\f11\b \
	ZeroDivisionError 
\f10\b0 - Raised when the second argument of a division or modulo operation is zero
\f11\b \
\pard\pardeftab720\sl320\partightenfactor0

\f10\b0 \cf15 \
\pard\pardeftab720\sl320\partightenfactor0

\f11\b \cf15 	
\f10\b0 - We use three keywords for this:\
		
\f11\b try: 
\f10\b0 This is the block of code to be attempted (may lead to an error)\
		
\f11\b except: 
\f10\b0 Block of code will execute in case there is an error in 
\f11\b try 
\f10\b0 block\

\f11\b 		finally: 
\f10\b0 A final block of code to be executed, regardless of an error\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls28\ilvl0\cf15 \kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
try:\
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
        # WANT TO ATTEMPT THIS CODE\
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
        # MAY HAVE AN ERROR\
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
        result = 10 + '10'\
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
        \
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
except:\
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
    print("Hey it looks like you aren't adding correcly")\
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
else:\
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
    print('Add went well')\
\ls28\ilvl0\kerning1\expnd0\expndtw0 {\listtext	     	}\expnd0\expndtw0\kerning0
    print(result)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 =============\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls29\ilvl0
\f0\fs26 \cf9 \kerning1\expnd0\expndtw0 {\listtext	          	}\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls30\ilvl0\cf9 {\listtext	     	}try:\
{\listtext	     	}    f = open('testfile','r')\
{\listtext	     	}    f.write('Write a test line')\
{\listtext	     	}except TypeError:\
{\listtext	     	}    print('There was a type error!')\
{\listtext	     	}except OSError:\
{\listtext	     	}    print('Hey you have an OS Errpr')\
{\listtext	     	}except:\
{\listtext	     	}    print('All other exceptions')\
{\listtext	     	}finally:\
{\listtext	     	}    print('I always run')\
{\listtext	     	}=================\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf9 \
    def ask_for_int():\
    while True:\
        try:\
            result = int(input('Please provide number'))\
        except:\
            print('Whoops that is not a number')\
            continue\
        else:\
            print('Yes thank you')\
            break\
        finally:\
            print('End of try/except/finally')\
            print('I will always run at the end')\
  	================\
\
	try:\
		num = int(input('Enter a number:'))\
		result = 10/num\
	except ValueError:\
		print('That's not a valid number')\
	except ZerodivisionError:\
		print('You can't divide by Zero')\
	except Exception as ex:\
		print(ex)\
	else:\
		print(f'The result is \{result\}')\
	finally:\
		print('Execution complete')\
    ===========================\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 #267 Iterator: 
\f0\b0 \
	- An object that can be iterated upon.  An object which returns data, one element at a time when next() is called on it\

\f6\b #267 Iterable:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 	- An object which will return an iterator when iter() I called on it. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 #272 Generators
\f0\b0  \
	- Function (uses return ) 			Generator Function  (uses yield)\
	- Function (returns once )		Generator Function (can yield multiple times)\
	- Function (when invoked, return the return value) Generator Function (When invoked, returns a generator)\
	
\f6\b # Decorators:\
	
\f0\b0 - Decorators allow you to \'91decorate\'92 a function\
	 - Python has decorators that allow you to tack on extra functionality to an already existing function.\
	- They use the @ operator and are then placed on top of the original function.\
	- This idea is pretty abstract in practice with Python syntax, so we will go through the steps of manually building out a 	decorator oversells, to show what the @ operator is doing behind 	the scenes.\
\

\f6\b 	# Generators:\
	
\f0\b0 - Generator functions allow us to write a function that can send back a value and then later resume to pick up where it left off.\
	- This type of function is a generator in Python, allowing us to generate a sequence of values over time.\
	- The main difference I syntax will be the use of a yield statement. \
	- When a generator function is compiled they become an object that supports an iteration protocol\
	- That means when then are called in your code they don\'92t actually return a value and then exit.\
	- Generator function will automatically suspend and resume their execution and state around the last point of value generations.\
	- The advantage is that instead of having to compute an entire series of values up front, the generator computes one value waits until that next value is call for.\
	- For example, the range() function doesn\'92t produce an list in memory for all the values from start to stop.\
	- Instead it just keeps track of the last number and the step size, to provide a flow of numbers. \
	- If a user did need that list, they have to transform the generator to a list with list(range(0,10))\
	- Let\'92s explore how to create our own generators!\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls31\ilvl0\cf9 {\listtext	         	}		\cf29 def create_cube(x):\
{\listtext	         	}			result =[]\
{\listtext	         	}			for x in range(x):\
{\listtext	         	}				result.append(x**3)\
{\listtext	         	}			return result\
{\listtext	         	}		create_cube(10) # it creares list of number and saved into memeory. => 
\f10\fs28 \expnd0\expndtw0\kerning0
[0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf29 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
				for i in create_cube(10):\
\kerning1\expnd0\expndtw0    					\expnd0\expndtw0\kerning0
print(I, end = \'91\'92)  # this print function needs one value at a time to display, No need to store entire list stoed in 									memory\
				=> 0 1 8 27 64 125 216 343 512 729\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 \
\
				#YIELD dosen't store value in the memeory rather than it process wheneven it requst\
				\cf20 def create_cubes(n):\
    				for x in range(n):\
        				yield x**3\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf20 \kerning1\expnd0\expndtw0 				\
				for i in create_cubes(10):\cf15 \
    					print(i) # in this print function it brings from yield process not from memory\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\li720\fi-720\pardirnatural\partightenfactor0
\ls32\ilvl0\cf15 {\listtext	     	}
\f11\b # NEXT\
{\listtext	     	}
\f10\b0 def simple_gen():\
{\listtext	     	}    for i in range(3):\
{\listtext	     	}        yield i \
{\listtext	     	}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 \expnd0\expndtw0\kerning0
		for i in simple_gen():\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0
\cf15 \kerning1\expnd0\expndtw0 			\expnd0\expndtw0\kerning0
print(I, end = \'91 \'92) => 0,1,2\
\kerning1\expnd0\expndtw0 		g = simple_gen()\
	\
		print(next(g)) => 0\
		print(next(g)) => 1\
		print(next(g)) => 2\
		print(next(g)) =>  ERROR\
\
		
\f11\b # ITER\
		
\f10\b0 s = \'91Hello\'92\
		s_iter = iter(s)\
		next(s_iter)\
			\expnd0\expndtw0\kerning0
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b\fs30 \cf9 \kerning1\expnd0\expndtw0 	# Collections Module:
\f0\b0\fs26 	\
	
\fs28 The collection module is a built-in module that implements specialized container datatypes providing alternatives to Python\'92s general purpose built-in containers, like dict, list, tuple\
\

\f6\b 	Counter
\f0\b0\fs26 \
	Couter is a dict subclass which helps count washable objects.  Inside of it elements are stored as dictionary keys and the counts of the objects are stored as the value. It counts number of similar objects in a list\
	\
	from collection import Counter\
	Counter(x)\
	Common patterns when using the Counter() object\
	sum(c.value()) - Total of all counts\
	c.clear - reset all counts\
	list(c)	- list unique elements\
	set(c) - convert to a set\
	dict(c) - convert to a regular dictionary\
	c.items() - convert to a list of (elem, ent) pairs\
	Counter(dict (list_of_pairs)) - convert from a list of ( elem, cnt) pairs\
	c.most_common()[:-n-1:-1] - n Least common elements\
	c += Conter() - remove zero and negative counts\
\

\f6\b\fs32 	defaultdict\
	
\f0\b0 defaultdict is a dictionary like object which provides all methods provided by dictionary but takes first argument (default_factory) as default data type for the dictionary.  Using defaultdict is faster than doing the same using dict.set default method. \

\f6\b 	A defaultdict will never raise a KeyError Any key that does not exit gets the value returned by the default factory.\
\
	
\f0\b0 from collections import defaultdict\
\

\f6\b\fs28 	OrderedDict\
	
\f0\b0 An OrderedDict is a dictionary subclass the remembers the order in which its contents are added.\
\
	from collections import OrderdDict\
\

\f6\b\fs32 	namedtuple\
	
\f0\b0\fs26 The standard type uses numerical indexes to access its members, for example \
	t =(1,2,3)\
	t[0] => 0\
\
	from collections import namedtuple\
	Dog = namedtuple(\'91Dog\'92,\'92age breed name\'92)\
	sam = Dog(age=2,breed=\'91Lab\'92,name=\'91Sammy\'92)\
\
	
\f6\b Python OS Module:\
	
\f0\b0 import os\
	os.getcwd() -> get cwd\
	os.listdir() -> list all item in cwd\
	os.walk\
\
	import shutil\
	shutil.move(source,distination) -> move files from source to destination\
	\
	import send2trash\
	send2trash.send2trash(location with file) -> send file to trash\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 	Python Datatime Module:\
	
\f0\b0 import datetime\
	datetime.time(20,2)\
	from datetime import date, date time\
\
	import random\
	random.randint(0,100)\
	random.seed(101)\
	random.choice()\
	random.choices() # sample with replacement\
	random.sampoe() # sample without replacement\
	random.shuffle()\
	random.uniform()\
	random.gauss()\
	\
	\

\f6\b 	Python Math and Random Module:\
	
\f0\b0 import math\
	from math import pi e inf nan log sin degrees radians\
	ceil() floor()  ond(4.5) -> 4 round(5.5) -> 6\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b\fs28 \cf9 	Python Debugger: (6:00)\
	
\f0\b0 import pdb\
	pdb.set_trace()\
\

\f6\b 	Timing your code\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 	import timeit
\f6\b \
	
\f0\b0 Sometimes its important to know how long your code is taking to run, or at least know if a particular line of code is slowing down your entire project.  Python has built-in timing module to do this. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 	Regular Expressions
\f0\b0\fs32 \
	
\fs26 Regular expressions are text matching patterns described with a formal syntax.  You\'92ll often hear regular expressions referred to as \'91regex\'92 or \'91regexp\'92 in conversation.  Regular expressions can include a variety of rules, for finding repetition, to text-matching. And much more. As you advance in Python you\'92ll see that a lot of your parsing problems can be solved with regular expressions.\
	import re\
	re.search()\
	re.findall()\
	re.finditer()\
	re.compiile()\
	var.span()\
	var.start()\
	var.end()\
	var.group()\
	\
	
\f6\b Character Identifiers in re
\f0\b0 \
	Character	Description		Exp. Partern Code		Example Match\
		\\d	A digit			file_\\d\\d			file_25\
		\\w	Alphanumaric	\\w-\\w\\w\\w			A-b_1\
		\\s	White spaces 	a\\sb\\sc			a b c\
		\\D	A non digit		\\D\\D\\D			ABC\
		\\W	Non-alphanumeric	\\W\\W\\W\\W\\W		*-+=)\
		\\S	Non-whitespace	\\S\\S\\S\\S			Upup\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 	Quantifies:\
	
\f0\b0 Character	Description				Exp. Pattern Code Exp. Match	\
		+	Occurs one or more times	Version \\w-\\w+	Version A-b1_1\
		\{3\}	Occurs exactly 3 times		\\D\{3\}			abc\
		\{2,4\}	Occurs 2 to 4 times		\\d\{2,4\}		123\
		\{3,\}	Occurs 3 or more			\\d(3,\}			anycharacters\
		*	Occurs zero or more times	A*B*C*		AAACC\
		?	Once or none			plurals?		plural		\
\

\f6\b 	re part3:\
	
\f0\b0 re.search(r\'92cat|dog\'92,\'92the cat is here\'92) | or operator\
	re.findall(r\'92.at\'92,\'92The cat in the hat sat there\'92) . whild card operator\
	re.findall(r\'92^\\d\'92,\'921 is a number) ^\\d stars with number\
	re.findall(r\'92\\d$\'92,The number iOS 2\'92) \\d$ ends with number\
	re.rindall(r\'92[^\\d\'92],\'92there are 3 numbers 34 inside 5 this sentence) returns list of characters with not numbers\
	re.findall(r\'92[^\\d\'92+],\'92there are 3 numbers 34 inside 5 this sentence) returns list of words with no numbers\
	re.findall(r\'92[^!.?]+\'92,\'92This is a string! But it has punctuation.  How can we remove it?\'92 -> removes !.?\
	re.findall(r\'92[\\w]+-[\\w]+\'92,\'92Only find the hype-words in this sentence. But you do not know how long-ish they are? -> hype-words,long-ish\
	re.findall(r\'92cat(fish|nap|erpillar)\'92,\'92Hello, would you like some catfish? Hello, would you like to take a catnap? Hello, have you seen the caterpillar?\'92 -> catfish,catnap,caterpillar\
\
		\

\f6\b 	Repittion Syntex:\
	
\f0\b0 1. A pattern followed by the metacharcter * is repeated zero or more times\
	2. Replace the * with _ and the pattern must appear at least once.\
	3 . Using ? means the pattern appears zero or one time.\
	4. For a specific number of occurrences, use \{m\} after the pattern, w here m is replaced with the number of times the pattern should repeat\
	5. Use \{man\} where m is the minimum number of repetitions and n is the maximum.  Leaving out n (\{m,\}) means the value appears at 1 east m time, with no maximum.\
\

\f6\b 	Charcter Sets:\
	
\f0\b0 Character sets are used when you wish to match any one of a group of characters at a point in the input.  Brackets are used to construct character set input.  \
\

\f6\b 	Exclusion:\
	
\f0\b0 We can user ^ to exclude terms by incorporating it into the bracket syntax notation.  For example [^..] will match any single character 	not in the brackets.
\fs34 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\fs26 \cf9 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 	Character Ranges:\
	
\f0\b0 As character sets grow larger, typing every character the should ( or should not) match could become very tedious,  A more compact format using character ranges lets you define a character set to include all of the contiguous characters between a start and stop point.  The format used is [start-end]\
	Common use cases are to search for a specific range of letters in the alphabet, such [a-f] would return matches with any instance of letters between a and f. \
\

\f6\b 	Escape Codes:\
	
\f0\b0 You can use special escape codes to find specific types of patterns in your data, such as digits, non-digits, whitespace, and more For example:\
	\\d a digit\
	\\D a non-digit\
	\\s whitespace (tab, space, newline, etc)\
	\\S non-whitespace\
	\\w alphanumeric\
	\\W non-alphanumeric\
\
	Escapes are indicated by prefixing the character with a backslash ().  Unfortunately, a backslash must itself be escaped in normal Python strings, and the results in expressions that are difficult to read.  Using raw strings, created by prefixing the literal value with r, for creating regular expressions eliminates this problem and maintains readability.\
\
\

\f6\b 	Web Scraping:\
	
\f0\b0 Syntax 								Match Result\
	soup.select(\'91div\'92)							All elements with \'91div\'92 tag\
	soup.select(\'91#some_id\'92)						Elements containing id =\'91some_id\'92\
	soup.select(\'91:some_class\'92)					Elements containing class = \'91some_class\'92\
	soup.select(\'91div span\'92)						Any elements named span within a div element.\
	soup.select(\'91div > span\'92)						Any elements named span directly within a div element, with nothing in between\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b\fs28 \cf9 	\
	To get URLs image:\
	\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 	img.content()\
	
\f6\b \
	StringIO\
	
\f0\b0\fs26 The StringIO module implements an in-memory file like object.  This object can then be used as input or output to most functions that would expect a standard file object. \
	import StringIO\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 	#Advanced Numbers\
\
	
\f0\b0 hexadecimal hex()\
	binary bin()\
	power pow(1,2,3)\
	absolute value abs(2)\
	round  round (12,2)\
\

\f6\b 	#Advanced Strings:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f0\b0 \cf9 	s = \'91hello world\'92\
	s.capitalize()\
	s.upper()\
	s.lowe()\
	s.count(\'91o\'92)\
	s.find(\'91p\'92)\
	s.center(20,\'92z\'92)\
	\'91hello\\thi\'92.expandtabs()\
	s.Isalnum() - checks all alpha numeric\
	s.isalpha() - chess all alpha\
	s.islower()\
	s.isspace()\
	s.istitle()\
	s.isupper(). \'91HELLO\'92.isupper(). -> True\
	s.endswith(\'91o\'92)\
	s.split(\'91e\'92)\
	s.partition(head, sep, tail)\
	\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab720\pardirnatural\partightenfactor0

\f6\b \cf9 	#Advanced Sets:\
	
\f0\b0 \
	s = set()\
	s.add(1)\
	s.clear()\
	s.copy()\
	s.difference(another_set)\
	s.difference_update(another_set)\
	s.discard(element in the set)\
	s.intersection(another_set)\
	s.intersection_update(another_set)\
	s.isdisjoint(anothor_set)\
	s.issubset(another_set)\
	s.issuperset(another_set)\
	s.issymetric_difference(another_set)\
	s.union(another_set)\
	s.update(another_set)\
\

\f6\b 	# Advanced Dictionaries\
\
	
\f0\b0 Dictionary Comprehensions\
	d = \{\'91k1\'92:1,\'92k2\'92:2\}\
	(x:x**2 for x in range(10))	\
	(x:x**2 for k,v in r zip([\'91a\'92,\'92b\'92]),ange(2))	\
	d.itertems()\
	d.itervalue()	\
	d.iterkey()\
	d.viewitesm()\
	d.viewkeys()	\
	d.viewvalues()\
\

\f6\b 	# Advanced Lists:\
	\
	
\f0\b0 l = [1,2,3]\
	l.append(item to be added)\
	l.count(item to be counted)\
	l.extened([2,3]) - added to the original list\
	l.index(2)\
	l.insert(indexposition,item)\
	l.pop()\
	l.remove()\
	l.reverse()\
	l.sort()\
\
\

\f6\b Web Scraping with Python:\
	\
	pip install request\
	pip install lxml\
	pip install bs4\
\
Pyton set
\f0\b0 \
		add()\
		claer()\
		copy()\
		set difference()\
		set difference_update()\
		frozenset()\
		set isdisjoin()\
		set issubset()\
		issuperset()\
		symmetric_difference()\
		symmetrric_difference_update()\
		union()\
		set update()\
\
		\
	\
\
\
}